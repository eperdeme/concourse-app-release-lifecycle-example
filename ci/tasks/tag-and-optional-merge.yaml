---
platform: linux
params:
  # The TARGET_BRANCH param is mandatory. The specified TARGET_BRANCH is just tagged and no merge occurs when ORIGIN_BRANCH is empty.
  # When specifying an ORIGIN_BRANCH a merge will be performed from ORIGIN_BRANCH (sth. like develop)
  # to TARGET_BRANCH (sth like master).
  GIT_PRIVATE_KEY: ""
  ORIGIN_BRANCH: ""
  TARGET_BRANCH: ""
  ARTIFACT_FILENAME: ""
image_resource:
  type: docker-image
  source:
    repository: eugenmayer/golang-builder # just an example image with git - use anything

inputs:
- name: repo
- name: artifact

outputs:
- name: repo-modified

run:
  path: bash
  args:
  - -ec
  - |

    # TODO: Think about using the current branch of the passed repo when Target is empty. Right we force it, as we are able to checkout every branch, no matter which branch the resource itself has.
    if [ -z "$TARGET_BRANCH" ]; then
      echo "Please specify a target branch to tag. If you specify a TARGET_BRANCH plus an ORIGIN_BRANCH, the ORIGIN_BRANCH will be merged into the TARGET_BANCH, and TARGET_BRANCH will be tagged as well."
      exit 1
    fi

    # ---------------------------------------- git ssh key / config deployment
    echo  "Deploy git ssh key"
    mkdir -p ~/.ssh
    echo "${GIT_PRIVATE_KEY}" >> ~/.ssh/id_rsa

    echo our ssh config for our dwdev alias
    echo 'Host *' >> ~/.ssh/config
    echo '  UserKnownHostsFile=/dev/null' >> ~/.ssh/config
    echo '  StrictHostKeyChecking=no' >> ~/.ssh/config

    chmod u=r,g=,o=  ~/.ssh/*
    eval "$(ssh-agent -s)"; ssh-add ~/.ssh/id_rsa
    # ------------------------------------------------------------------------

    git config --global user.email "foo@mailinator.com"
    git config --global user.name "Foo At Mailinator"

    export CI_BASE=$(pwd)
    # Extract artifact and export infos into env
    cd ${CI_BASE}/artifact
    # pick the first file we find using the probably glob the user gave us
    ARTIFACT_FILENAME=$(find `pwd` -name "${ARTIFACT_FILENAME}" | head -1)
    mkdir -p /tmp/codebase
    tar -xzf $ARTIFACT_FILENAME -C /tmp/codebase
    export VERSION=$(cat $(find /tmp/codebase -name .version | head -1))
    export COMMITREF=$(cat $(find /tmp/codebase -name .commitref | head -1))
    echo "VERSION: $VERSION"
    echo "COMMITREF: $COMMITREF"

    cd ${CI_BASE}/repo

    # Configure git to be able to always fetch all branches
    git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

    # Fetch all specified branches - be sure to have them available.
    if [ ! -z "$ORIGIN_BRANCH" ]; then
      git fetch origin ${ORIGIN_BRANCH}
    fi

    git fetch origin ${TARGET_BRANCH}

    echo "Copy the repo by using the local inout directory"
    # Important: The target dir will have the git remote set to the local directory!!!
    cd ${CI_BASE}

    # Copy all files and folders from the repo, including hidden files (hence the repo/[.] dot at the end!)
    cp -ar repo/. repo-modified/

    echo "Start git manipulations"
    cd ${CI_BASE}/repo-modified

    if [ ! -z "$ORIGIN_BRANCH" ]; then
      echo "Make sure we are on the specified origin branch, the param has higher precedence than the passed repo"
      git checkout ${ORIGIN_BRANCH}

      echo "Reset hard to be sure we are on the commitref of the commit of the artifact passed into this task."
      git reset --hard ${COMMITREF}

      echo Merge
      git checkout ${TARGET_BRANCH}
      git merge ${ORIGIN_BRANCH}

      # Comment in the below command when using --no-ff for the merge command
      # git commit -am "Merge ${ORIGIN_BRANCH} (${COMMITREF}) into ${TARGET_BRANCH}."
    fi

    # Idempotent: ensure we are on the right branch and the right commitref to tag, no matter ifmerged or not.
    git checkout ${TARGET_BRANCH}
    git reset --hard ${COMMITREF}

    echo "create tag now"
    git tag -a ${VERSION} -m "Auto Tagging by CI" ${COMMITREF}
